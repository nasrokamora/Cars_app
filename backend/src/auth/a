export class AuthService {
  constructor(
    private readonly userService: UserService,
    private jwtService: JwtService,
  ) {}

  async validateUser(authCredentialsDto: AuthCredentialsDto){
    const {email, password} = authCredentialsDto;
    const user = await this.userService.findUserByEmail(email);
    if(!user) return null


    const isPasswordValid = await bvrypt.compare(password, user.password)
    if(!isPasswordValid) return null;
    return user; // إعادة البيانات بدون كلمة المرور
}


async login(authCredentialsDto:AuthCredentialsDto){
    const { email, password} = authCredentialsDto;
    const user = await this.validateUser(email, password)
    if(!user) throw new UnauthorizedException('Invalid credentials');

    const payload = {email:user.email, sub:user.id}

    const token = await this.jwtService.signAsync(payload)
    return {
        accesstoken:token,
        user: {
            id:user.id,
            email:user.email,
            role:user.role,
        }
    }
}

async signup(authCredentialsDto: AuthCredentialsDto) {
    const user = await this.userService.createUser(authCredentialsDto);
    const payload = {email: user.email, sub: user.id};
    const 
}
}
