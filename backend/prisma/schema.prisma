// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) // معرف المستخدم (رقمي، متزايد تلقائيًا)
  email         String         @unique // عنوان البريد الإلكتروني (مفرد وحصري)
  password      String // كلمة المرور (سنخزّنها مشفّرة)
  username      String         @unique
  role          Role           @default(USER) // دور المستخدم (مثل USER أو ADMIN)
  cars          Car[]
  messages      Message[]      @relation("UserMessages")
  createdAt     DateTime       @default(now()) // تاريخ الإنشاء (الافتراضي: الوقت الحالي)
  updatedAt     DateTime       @updatedAt // تاريخ التحديث (يتغيّر تلقائيًا عند التعديل)
  images        Image[]
  refreshTokens RefreshToken[] // علاقة مع جدول الريفريش
}

model RefreshToken {
  id         String    @id @default(uuid())
  tokenHash  String
  jti        String    @unique // <<-- jti مميز لكل توكن (UUID)
  userId     String
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime // صلاحية التوكين
  revokedAt  DateTime? //null = مازال صالح، غير null = مرفوض
  ip         String? // اختياري: تخزين IP
  userAgent  String? // اختياري: تخزين نوع الجهاز/المتصفح
  replacedBy String?
}

enum Role {
  USER
  ADMIN
}

model Car {
  id          String    @id @default(uuid())
  title       String
  discription String
  price       Float
  brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     String
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  images      Image[]   @relation("CarImages")
  owner       User      @relation(fields: [ownerid], references: [id])
  ownerid     String
  createdAt   DateTime  @default(now())
  Message     Message[]
}

model Brand {
  id   String @id @default(uuid())
  name String @unique
  cars Car[]
}

model Image {
  id         String   @id @default(uuid())
  url        String
  car        Car?     @relation("CarImages", fields: [carId], references: [id])
  carId      String?
  uploadedBy User     @relation(fields: [userId], references: [id])
  avatarUrl  String?
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id   String @id @default(uuid())
  name String @unique
  car  Car[]
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  car       Car      @relation(fields: [carId], references: [id])
  carId     String
  createdAt DateTime @default(now())
}
